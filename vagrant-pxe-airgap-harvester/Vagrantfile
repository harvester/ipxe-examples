# vi: set ft=ruby ts=2 :

require 'yaml'

VAGRANTFILE_API_VERSION = "2"

# check for required plugins
_required_plugins_list = %w{vagrant-libvirt}
exit(1) unless _required_plugins_list.all? do |plugin|
  Vagrant.has_plugin?(plugin) || (
    STDERR.puts "Required plugin '#{plugin}' is missing; please install using:"
    STDERR.puts "  % vagrant plugin install #{plugin}"
    false
  )
end

# ensure libvirt is the default provider in case the vagrant box config
# doesn't specify it
ENV['VAGRANT_DEFAULT_PROVIDER'] = "libvirt"

@root_dir = File.dirname(File.expand_path(__FILE__))
@settings = YAML.load_file(File.join(@root_dir, "settings.yml"))

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # continerd is taking more than 60 seconds to shutdown in SUSE platforms
  # so increase the timeout to 120 seconds
  config.vm.graceful_halt_timeout = 120

  config.vm.define :pxe_server do |pxe_server|

    pxe_server.vm.box = 'generic/debian10'
    pxe_server.vm.hostname = 'pxe-server'
    pxe_server.vm.network 'private_network',
      ip: @settings['harvester_network_config']['dhcp_server']['ip'],
      libvirt__network_name: 'harvester',
      # don't enable DHCP as this node will have it's now DHCP server for iPXE
      # boot
      libvirt__dhcp_enabled: false

    pxe_server.vm.provider :libvirt do |libvirt|
      libvirt.cpu_mode = 'host-passthrough'
      libvirt.memory = '4096'
      libvirt.cpus = '2'
    end

    # Use ansible to install server
    pxe_server.vm.provision :ansible do |ansible|
      ansible.playbook = 'ansible/setup_pxe_server.yml'
      ansible.verbose ="vvv"
      ansible.extra_vars = {
        settings: @settings
      }
    end
  end

  config.vm.define :rancher_box do |rancher_box|
    rancher_box.vm.box = 'generic/ubuntu2004'
    rancher_box.vm.hostname = @settings['rancher_config']['rancher_install_domain']
    #rancher_box.vm.network "public_network", auto_config: true
    # default network is eth0
    # private network becomes eth1
    # rancher_box.vm.network 'public_network',
    #   dev: 'virbr0',
    #   network_name: "rancher-public",
    #   auto_config: true
    rancher_box.vm.network 'private_network',
      libvirt__network_name: 'harvester',
      mac: @settings['rancher_config']['mac_address_harvester_network']
    rancher_box.vm.provider :libvirt do |libvirt|
        libvirt.cpu_mode = 'host-passthrough'
        libvirt.memory = @settings['rancher_config']['memory']
        libvirt.cpus = @settings['rancher_config']['cpu']
        # libvirt.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
        # libvirt.qemu_use_agent = true
        libvirt.storage :file,
            size: @settings['rancher_config']['node_disk_size'],
            type: 'qcow2',
            bus: 'virtio',
            device: 'vdb',
            serial: 'bdef2c36-cfab-4f75-b0f5-7bdae75417ce'
        libvirt.boot 'hd'
        libvirt.nic_model_type = 'e1000'
    end
    # We need to over-ride what vagrant would typically use to connect to ssh with ansible
    # So we provide an additional inventory for vagrant that ties to the file/host
    # Ensuring we can connect over the harvester net, not the temporary eth0 that will be cut
    rancher_box.vm.provision :ansible do |ansible|
        ansible.verbose ="vvv"
        ansible.inventory_path = "inventories/vagrant"
        ansible.playbook = 'ansible/setup_rancher_node.yml'
        ansible.extra_vars = {
            settings: @settings
        }
    end
  end


  cluster_node_index = @settings['harvester_cluster_nodes'] - 1
  (0..cluster_node_index).each do |node_number|
    vm_name = "harvester-node-#{node_number}"
    config.vm.define vm_name, autostart: false do |harvester_node|
      harvester_node.vm.hostname = "harvester-node-#{node_number}"
      harvester_node.vm.network 'private_network',
        libvirt__network_name: 'harvester',
        mac: @settings['harvester_network_config']['cluster'][node_number]['mac']

      harvester_node.vm.provider :libvirt do |libvirt|
        libvirt.cpu_mode = 'host-passthrough'
        libvirt.memory = @settings['harvester_network_config']['cluster'][node_number].key?('memory') ? @settings['harvester_network_config']['cluster'][node_number]['memory'] : @settings['harvester_node_config']['memory']
        libvirt.cpus = @settings['harvester_network_config']['cluster'][node_number].key?('cpu') ? @settings['harvester_network_config']['cluster'][node_number]['cpu'] : @settings['harvester_node_config']['cpu']
        libvirt.storage :file,
          size: @settings['harvester_network_config']['cluster'][node_number].key?('disk_size') ? @settings['harvester_network_config']['cluster'][node_number]['disk_size'] : @settings['harvester_node_config']['disk_size'],
          type: 'qcow2',
          bus: 'virtio',
          device: 'vda'
        boot_network = {'network' => 'harvester'}
        libvirt.boot 'hd'
        libvirt.boot boot_network
        # NOTE: default to UEFI boot. Comment this out for legacy BIOS.
        libvirt.loader = '/usr/share/qemu/OVMF.fd'
        libvirt.nic_model_type = 'e1000'
      end
    end
  end
end
