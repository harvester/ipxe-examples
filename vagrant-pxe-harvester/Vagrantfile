# vi: set ft=ruby ts=2 :

require 'yaml'
require 'nokogiri'

VAGRANTFILE_API_VERSION = "2"

# check for required plugins
_required_plugins_list = %w{vagrant-libvirt}
exit(1) unless _required_plugins_list.all? do |plugin|
  Vagrant.has_plugin?(plugin) || (
    STDERR.puts "Required plugin '#{plugin}' is missing; please install using:"
    STDERR.puts "  % vagrant plugin install #{plugin}"
    false
  )
end

def create_nvme(trigger, name, size, type)
  trigger.warn = "Creating volume #{name}"

  require 'etc'
  storage_owner = begin
                    Etc.getpwnam('qemu')
                  rescue
                    Etc.getpwnam('root')
                  end

  trigger.run = {inline: "sh -c \"\
    virsh -c qemu:///system vol-info --pool default #{name} >/dev/null 2>&1 || \
    virsh -c qemu:///system vol-create-as default #{name} \
      --capacity #{size} \
      --format #{type} \
      --print-xml | \
    sed '/<target>/a <permissions><owner>#{storage_owner.uid}</owner><group>#{storage_owner.gid}</group></permissions>' | \
    virsh -c qemu:///system vol-create default /dev/stdin 2>&1\""}
end

def delete_nvme(trigger, name)
  trigger.warn = "Destroying volume #{name}"

  trigger.run = {inline: "sh -c \"\
    virsh -c qemu:///system vol-delete --pool default #{name} || :\""}
end

# ensure libvirt is the default provider in case the vagrant box config
# doesn't specify it
ENV['VAGRANT_DEFAULT_PROVIDER'] = "libvirt"

@root_dir = File.dirname(File.expand_path(__FILE__))
@settings = YAML.load_file(File.join(@root_dir, "settings.yml"))
@pool_path = Nokogiri::XML(%x(virsh -c qemu:///system pool-dumpxml default)).at_xpath('/pool/target/path').content

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # continerd is taking more than 60 seconds to shutdown in SUSE platforms
  # so increase the timeout to 120 seconds
  config.vm.graceful_halt_timeout = 120

  # PXE Server
  config.vm.define :pxe_server do |pxe_server|
    pxe_server.vm.box = 'generic/debian11'
    pxe_server.vm.hostname = 'pxe-server'
    pxe_server.vm.network 'private_network',
      ip: @settings['harvester_network_config']['dhcp_server']['ip'],
      libvirt__network_name: 'harvester',
      libvirt__dhcp_enabled: false

    pxe_server.vm.provider :libvirt do |libvirt|
      libvirt.cpu_mode = 'host-passthrough'
      libvirt.memory = '2048'
      libvirt.cpus = '2'
    end

    pxe_server.vm.provision :ansible do |ansible|
      ansible.playbook = 'ansible/setup_pxe_server.yml'
      ansible.extra_vars = {
        settings: @settings
      }
    end
  end

  # Harvester
  nodes = @settings['harvester_network_config']['cluster']
  cluster_node_index = nodes.length - 1
  (0..cluster_node_index).each do |node_number|
    node = nodes[node_number]

    vm_name = "harvester-node-#{node_number}"
    config.vm.define vm_name, autostart: false do |harvester_node|
      harvester_node.vm.hostname = "harvester-node-#{node_number}"
      harvester_node.vm.network 'private_network',
        libvirt__network_name: 'harvester',
        mac: node['mac']

      harvester_node.vm.provider :libvirt do |libvirt|
        # libvirt.nested = true
        libvirt.cpu_mode = 'host-passthrough'
        libvirt.memory = node.key?('memory') ? node['memory'] : 8192
        libvirt.cpus = node.key?('cpu') ? node['cpu'] : 4

        # disks
        disks = node['disks']
        num_disks = disks.length - 1
        (0..num_disks).each do |disk_index|
          disk = disks[disk_index]

          if disk['bus'] == 'scsi'
            libvirt.storage :file,
              device: disk['name'],
              size: disk['size'],
              type: 'qcow2',
              bus: disk['bus'],
              cache: disk.key?('cache') ? disk['cache'] : 'default',
              wwn: disk.key?('wwn') ? disk['wwn'] : '0x5100000000000001'
          elsif disk['bus'] == 'nvme'
            nvme_name = "#{File.basename(@root_dir)}_#{vm_name}-#{disk['name']}.qcow2"
            nvme_path = File.join(@pool_path, nvme_name)

            bootidx_str = ""
            if node.key?('root_disk')
              if node['root_disk'] == disk['name']
                bootidx_str = ",bootindex=0"
              end
            else
              if disk_index == 0
                bootidx_str = ",bootindex=0"
              end
            end

            serial_nr = "#{node_number}#{disk_index}_1234"
            addr = "1#{disk_index}"

            libvirt.qemuargs :value => '-drive'
            libvirt.qemuargs :value => "file=#{nvme_path},if=none,id=#{disk['name']}"
            libvirt.qemuargs :value => '-device'
            libvirt.qemuargs :value => "nvme,addr=#{addr},drive=#{disk['name']},serial=#{serial_nr}#{bootidx_str}"

            harvester_node.trigger.before :up do |trigger|
              create_nvme(trigger, nvme_name, disk['size'], disk.key?('type') ? disk['type'] : 'qcow2')
            end

            harvester_node.trigger.before :destroy do |trigger|
              delete_nvme(trigger, nvme_name)
            end
          else
            libvirt.storage :file,
              device: disk['name'],
              size: disk['size'],
              type: 'qcow2',
              bus: disk.key?('bus') ? disk['bus'] : 'virtio',
              cache: disk.key?('cache') ? disk['cache'] : 'default'
          end
        end

        boot_network = {'network' => 'harvester'}
        libvirt.boot 'hd'
        libvirt.boot boot_network
        # NOTE: default to UEFI boot. Comment this out for legacy BIOS.
        # libvirt.loader = '/usr/share/qemu/OVMF.fd'
        libvirt.loader = '/usr/share/qemu/ovmf-x86_64.bin'
        # libvirt.nic_model_type = 'e1000'
        libvirt.nic_model_type = 'virtio'
      end
    end
  end

  # Rancher
  if @settings['rancher_config']['enabled']
    config.vm.define :rancher do |rancher|
      rancher.vm.box = 'generic/debian10'
      rancher.vm.hostname = 'rancher'
      rancher.vm.network 'private_network',
        ip: @settings['rancher_config']['ip'],
        libvirt__network_name: 'harvester',
        libvirt__dhcp_enabled: false

        rancher.vm.provider :libvirt do |libvirt|
        libvirt.cpu_mode = 'host-passthrough'
        libvirt.cpus = @settings['rancher_config']['cpu']
        libvirt.memory = @settings['rancher_config']['memory']
      end

      rancher.vm.provision :ansible do |ansible|
        ansible.playbook = 'ansible/setup_rancher.yml'
        ansible.extra_vars = {
          settings: @settings
        }
      end
    end
  end

end
